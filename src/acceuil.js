
// Vous pouvez √©galement utiliser JavaScript pour masquer le spinner une fois que la page est enti√®rement charg√©e
window.addEventListener('load', function() {
    var spinner = document.querySelector('.loading-overlay');
    spinner.style.display = 'none';
});

document.addEventListener("DOMContentLoaded", function() {
    const toggleButtons = document.querySelectorAll(".toggle-btn");

    toggleButtons.forEach(function(button) {
        button.addEventListener("click", function() {
            const answer = this.nextElementSibling;
            this.classList.toggle("active");
            const answerDisplayStyle = window.getComputedStyle(answer).display;
            if (answerDisplayStyle === "block" || answerDisplayStyle === "") {
                answer.style.display = "none";
            } else {
                answer.style.display = "block";
            }
        });
    });
});

document.addEventListener("DOMContentLoaded", function() {
    const contactUsLink = document.querySelector(".contact-us");

    contactUsLink.addEventListener("click", function(event) {
        event.preventDefault(); // Pour emp√™cher le lien de s'ouvrir imm√©diatement
        window.location.href = "mailto:projet-ppd@gmail.com"; // Remplacez par votre adresse e-mail
    });
});

document.addEventListener('DOMContentLoaded', function() {
    // Donn√©es d'actifs (juste un exemple)
    const assets = [
        { coin: 'Bitcoin', amount: 0.5, price: 50000, image: 'images/BTC.png' },
        { coin: 'Ethereum', amount: 0.3, price: -2, image: 'images/ETH.png' },
        { coin: 'Tether', amount: 100, price: 1, image: 'images/USDC.png' },
        { coin: 'Cardano', amount: 150, price: 2, image: 'images/ADA.png' },
        { coin: 'XRP', amount: 200, price: -0.5, image: 'images/XRP.png' },
        { coin: 'Solana', amount: 10, price: 150, image: 'images/SOL.png' },

    ];

    // S√©lection de l'√©l√©ment de la table des actifs
    const assetTable = document.getElementById('asset-items');

    // Nombre d'√©l√©ments √† afficher par ligne
    const itemsPerRow = 3;
    // Nombre d'√©l√©ments √† afficher par page
    const itemsPerPage = 6;
    // Indice de la page actuelle
    let currentPage = 1;

    // Fonction pour afficher les actifs
    function displayAssets(page) {
        // Effacer le contenu de la table des actifs
        assetTable.innerHTML = '';
        // Calculer l'indice de d√©but et de fin pour les actifs √† afficher sur la page actuelle
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, assets.length);
        // Cr√©er une seule ligne pour chaque groupe de 3 actifs
        for (let i = startIndex; i < endIndex; i += itemsPerRow) {
            const row = document.createElement('tr');
            // Ajouter chaque actif dans une case de la ligne
            for (let j = i; j < Math.min(i + itemsPerRow, endIndex); j++) {
                const asset = assets[j];
                const cell = document.createElement('td');

                const coinImage = document.createElement('img');
                coinImage.src = asset.image || 'default_icon.png';
                coinImage.width = 20; // Taille de l'image
                cell.appendChild(coinImage);
                // Ajout du prix en gras et avec la coloration
                const priceText = document.createElement('span');
                priceText.innerHTML = `<strong>Price:</strong> <span style="font-style: italic; color: ${asset.price >= 0 ? '#3bf503' : '#ff0505'}">${asset.price}</span>`;
                cell.appendChild(priceText);
                // Ajout du montant en italique
                cell.innerHTML += `<br><em><strong>Amount:</strong></em> ${asset.amount}`;
                // Ajout du nom de la pi√®ce en italique
                cell.innerHTML += `<br><strong></strong><em>${asset.coin}</em>`;
                row.appendChild(cell);
            }
            // Ajouter la ligne √† la table des actifs
            assetTable.appendChild(row);
        }

        // Afficher ou masquer le bouton "Previous" en fonction de la page actuelle
        const previousButton = document.getElementById('previous');
        if (currentPage > 1) {
            previousButton.style.display = 'inline-block';
        } else {
            previousButton.style.display = 'none';
        }
    }


    // Afficher les actifs lors du chargement de la page
    displayAssets(currentPage);

    // S√©lection du bouton "Show more"
    const showMoreButton = document.getElementById('show-more');
    // Ajouter un gestionnaire d'√©v√©nement pour le clic sur le bouton "Show more"
    showMoreButton.addEventListener('click', function() {
        // Incr√©menter le num√©ro de page actuel
        currentPage++;
        // Afficher les actifs de la nouvelle page
        displayAssets(currentPage);
        // Masquer le bouton "Show more" s'il n'y a plus d'√©l√©ments √† afficher
        if (currentPage * itemsPerPage >= assets.length) {
            showMoreButton.style.display = 'none';
        }
    });

    // S√©lection du bouton "Previous"
    const previousButton = document.getElementById('previous');
// Ajouter un gestionnaire d'√©v√©nement pour le clic sur le bouton "Previous"
    previousButton.addEventListener('click', function() {
        // D√©cr√©menter le num√©ro de page actuel
        currentPage--;
        // Afficher les actifs de la nouvelle page
        displayAssets(currentPage);
        // Afficher le bouton "Show more" s'il y a plus d'√©l√©ments √† afficher
        if (currentPage === 1 && assets.length > itemsPerPage) {
            showMoreButton.style.display = 'inline-block';
        }
    });

});


// R√©cup√©rer le bouton et la fen√™tre modale
var evaluationButton = document.getElementById("evaluationButton");
var modal = document.getElementById("evaluationModal");

// R√©cup√©rer le span qui permet de fermer la fen√™tre modale
var span = document.getElementsByClassName("close")[0];

// Ajouter un √©v√©nement de clic au bouton
evaluationButton.onclick = function() {
    modal.style.display = "block";
}

// Ajouter un √©v√©nement de clic au span pour fermer la fen√™tre modale
span.onclick = function() {
    modal.style.display = "none";
}

// Fermer la fen√™tre modale lorsque l'utilisateur clique en dehors de celle-ci
window.onclick = function(event) {
    if (event.target == modal) {
        modal.style.display = "none";
    }
}
document.addEventListener('DOMContentLoaded', function() {
    // S√©lection de tous les √©toiles
    const stars = document.querySelectorAll('.star');

    // Ajout d'un gestionnaire d'√©v√©nement de clic √† chaque √©toile
    stars.forEach(star => {
        star.addEventListener('click', function() {
            // R√©cup√©rer la note de l'√©toile cliqu√©e
            const rating = parseInt(star.dataset.rating);
            // Appeler la fonction pour s√©lectionner la note
            selectRating(rating);
        });
    });

    // Fonction pour s√©lectionner la note
    function selectRating(rating) {
        // Supprimer la classe "selected" de toutes les √©toiles
        stars.forEach(star => star.classList.remove('selected'));
        // Ajouter la classe "selected" aux √©toiles s√©lectionn√©es
        for (let i = 0; i < rating; i++) {
            stars[i].classList.add('selected');
        }
        // Afficher le message correspondant √† la note
        displayRatingMessage(rating);
    }

    // Fonction pour afficher le message correspondant √† la note s√©lectionn√©e
    function displayRatingMessage(rating) {
        const message = document.getElementById('ratingMessage');
        switch (rating) {
            case 1:
                message.textContent = "Pas du tout satisfait üòû";
                break;
            case 2:
                message.textContent = "Peut mieux faire üôÇ";
                break;
            case 3:
                message.textContent = "Bien mais peut √™tre am√©lior√© üòä";
                break;
            case 4:
                message.textContent = "Tr√®s satisfait ! üòÑ";
                break;
            case 5:
                message.textContent = "Excellente exp√©rience ! üòÉ";
                break;
            default:
                message.textContent = "Merci d'√©valuer notre site !";
        }
    }
    // Fonction pour s√©lectionner la note
    function selectRating(rating) {
        // Supprimer la classe "selected" de toutes les √©toiles
        stars.forEach(star => star.classList.remove('selected'));
        // Ajouter la classe "selected" aux √©toiles s√©lectionn√©es
        for (let i = 0; i < rating; i++) {
            stars[i].classList.add('selected');
        }
        // Afficher le message correspondant √† la note
        displayRatingMessage(rating);

        // Remplacer les √©toiles par des emojis
        stars.forEach((s, i) => {
            if (i < rating) {
                s.textContent = '‚≠ê'; // Remplacer l'√©toile par un emoji d'√©toile pleine
            } else {
                s.textContent = '‚òÜ'; // Remplacer l'√©toile par un emoji d'√©toile vide
            }
        });
    }

});
// D√©sactiver l'√©v√©nement de copie
document.addEventListener('copy', function(event) {
    event.preventDefault();
    alert("Le copier est d√©sactiv√© sur ce site.");
});

// D√©sactiver l'√©v√©nement de s√©lection de texte
document.addEventListener('selectstart', function(event) {
    event.preventDefault();
});
// D√©sactiver l'√©v√©nement de copie
document.addEventListener('copy', function(event) {
    event.preventDefault();
    alert("Le copier est d√©sactiv√© sur ce site.");
});

// D√©sactiver l'√©v√©nement de s√©lection de texte
document.addEventListener('selectstart', function(event) {
    event.preventDefault();
});

// Fonction pour ajuster la taille de la page

function ajusterTaillePage() {
    // R√©cup√©rer la largeur et la hauteur de l'√©cran
    var largeurEcran = window.innerWidth;
    var hauteurEcran = window.innerHeight;

    // Appliquer la taille de l'√©cran aux √©l√©ments de la page
    // Par exemple, vous pouvez ajuster la taille d'un √©l√©ment avec l'ID "conteneur"
    var conteneur = document.getElementById('conteneur');
    conteneur.style.width = largeurEcran + 'px';
    conteneur.style.height = hauteurEcran + 'px';
}

// Appeler la fonction lors du chargement de la page et lors du redimensionnement de la fen√™tre
window.addEventListener('load', ajusterTaillePage);
window.addEventListener('resize', ajusterTaillePage);

// Fonction pour afficher la page de connexion  """"remplir par backend """"
function showLoginPage() {
    // Redirection vers la page de connexion
    window.location.href = "login.html";
}
// Fonction pour marquer l'√©l√©ment actif
function markActive(clickedElement) {
    // Supprimer la classe active de tous les √©l√©ments du menu
    var menuItems = document.querySelectorAll('.menu-item');
    menuItems.forEach(function(item) {
        item.classList.remove('active');
    });

    // Ajouter la classe active √† l'√©l√©ment cliqu√©
    clickedElement.classList.add('active');
}

// Fonction pour afficher la page d'inscription
function showSignupPage() {
    // Redirection vers la page d'inscription
    window.location.href = "signup.html";
}

// Fonction pour traduire le site en fran√ßais
function translateToFrench() {
    // Code pour utiliser l'API de traduction ici
}



// R√©cup√©rez les boutons "Sign up" et "Login"
var signupButton = document.querySelector(".signup-btn1");
var loginButton = document.querySelector(".login-btn1");
var notificationButton = document.querySelector(".notification-button");
var userButton = document.querySelector(".user-button");
var joinUsSection = document.querySelector(".market-JoinUs");

// Condition pour v√©rifier si l'utilisateur est un guest ou un user
var isGuest = true;

if (isGuest) {
    loginButton.style.display = "block";
    signupButton.style.display = "block";
    joinUsSection.style.display = "block";
    notificationButton.style.display = "none";
    userButton.style.display = "none";
} else {
    signupButton.style.display = "none";
    loginButton.style.display = "none";
    notificationButton.style.display = "block";
    userButton.style.display = "block";
    joinUsSection.style.display = "none";
}

// Fonction pour g√©rer l'inscription
function signup() {
    // R√©cup√©rer l'e-mail entr√© par l'utilisateur
    var email = document.getElementById('searchInput').value;

    // V√©rifier si l'e-mail est valide (vous pouvez ajouter une validation ici si n√©cessaire)

    // Faire quelque chose avec l'e-mail, comme l'envoyer √† un serveur ou le stocker localement

    // Redirection vers la page d'inscription (remplacez signup.html par votre page d'inscription r√©elle)
    window.location.href = "signup.html";
}
